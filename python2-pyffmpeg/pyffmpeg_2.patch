--- src/pyffmpeg-2.1beta/pyffmpeg.pyx	2012-03-19 10:24:13.174535158 +0100
+++ src/pyffmpeg-2.1beta/new.pyx	2012-03-19 10:26:42.226914194 +0100
@@ -16,7 +16,7 @@
 #       * why seek_before mandatory
 #       * Add support for video encoding
 #       * add multithread support
-#       * Fix first frame bug... 
+#       * Fix first frame bug...
 #
 #    Abilities
 #     * Frame seeking (TO BE CHECKED again and again)
@@ -220,7 +220,6 @@
         float     b_quant_factor
         int     rc_strategy
         int     b_frame_strategy
-        int     hurry_up
         int     rtp_mode
         int     rtp_payload_size
         int     mv_bits
@@ -421,7 +420,7 @@
 #    int avcodec_decode_audio2(AVCodecContext *avctx, #AVFrame *picture,
 #                         int16_t * samples, int * frames,
 #                         void *buf, int buf_size)
-    int avcodec_decode_audio3(AVCodecContext *avctx, 
+    int avcodec_decode_audio3(AVCodecContext *avctx,
                          int16_t * samples, int * frames,
                          AVPacket * avpkt)
 
@@ -907,7 +906,6 @@
             skip_frame
             skip_idct
             skip_loop_filter
-            hurry_up
             dct_algo
             idct_algo
 
@@ -925,7 +923,6 @@
             self.CodecCtx.flags = self.CodecCtx.flags | CODEC_FLAG_TRUNCATED
         avcodec_open(self.CodecCtx, self.Codec)
         if args.has_key("hurry_mode"):
-            self.CodecCtx.hurry_up=2
             self.CodecCtx.skip_loop_filter=32
             self.CodecCtx.skip_frame=32
             self.CodecCtx.skip_idct=32
@@ -935,8 +932,6 @@
             self.CodecCtx.skip_idct=args["skip_idct"]
         if args.has_key("skip_loop_filter"):
             self.CodecCtx.skip_loop_filter=args["skip_loop_filter"]
-        if args.has_key("hurry_up"):
-            self.CodecCtx.skip_loop_filter=args["hurry_up"]
         if args.has_key("dct_algo"):
             self.CodecCtx.dct_algo=args["dct_algo"]
         if args.has_key("idct_algo"):
@@ -1098,14 +1093,14 @@
         self.audio_pkt_size=0
 
     cdef int audio_decode_frame(self,  AVCodecContext *aCodecCtx,
-            uint8_t *audio_buf,  int buf_size, double * pts_ptr, 
+            uint8_t *audio_buf,  int buf_size, double * pts_ptr,
             double * audio_clock, int nchannels, int samplerate, AVPacket * pkt, int first) :
         cdef double pts
         cdef int n
         cdef int len1
         cdef int data_size
 
-        
+
         data_size = buf_size
         #print "datasize",data_size
         len1 = avcodec_decode_audio3(aCodecCtx, <int16_t *>audio_buf, &data_size, pkt);
@@ -1248,7 +1243,7 @@
         self.rdata_size=self.data_size
         lf=2
         audio_size=self.rdata_size*lf
-	
+
         first=1
         #DEBUG( "process packet size=%s pts=%s dts=%s "%(str(pkt.size),str(pkt.pts),str(pkt.dts)))
         if (audio_size>0):
@@ -1669,12 +1664,10 @@
         if (b) :
             self.CodecCtx.skip_idct = AVDISCARD_BIDIR
             self.CodecCtx.skip_frame = AVDISCARD_BIDIR
-            self.CodecCtx.hurry_up = 1
             self.hurried_frames = 0
         else:
             self.CodecCtx.skip_idct = 0
             self.CodecCtx.skip_frame = 0
-            self.CodecCtx.hurry_up = 0
 
     ########################################
     ###
